#include <Servo.h> 

Servo Steering;  // create servo object to control a servo 
Servo Motor;  // create servo object to control a servo 

//  The definitions below allow us to say what pins will be active on the Arduino Board 

#define pinServo A0 
#define pinMotor 9
#define trigPin 13
#define echoPin 12
#define led 11
#define led2 10

#define BRAKESTOP 10


int speed = 1; 
int limits[2] = {30,150};  // set limitations (min/max: 0->180)
boolean refresh = false;  // toggle refresh on/off
int incomingByte = 0;
int inverseAcceleration = 0;

//  Enumeration, State controller, allows to turn off/on. State is referring what it is doing,just state of the car, the current instructions of car.

byte state; 

// State controls, including neuteral, forward, and reverse. Also allows us to reset the orientation of the wheels, and move them left and or right whiel in Neuteral (NR, NS,NL)


enum { FS, FL, FR, RS, RL, RR,  N, BF, BR, RESET, NR, NS, NL}; 

//  This is where we will set wheel directions, and time moving in each direction for each parallel parking procedure

/****** Parking ******/
/*
#define NUMPRIMITIVES 10
byte primitive[NUMPRIMITIVES] = {N,   RL, RL,   N,    RR,   NS,   BR,   FS,   BF, N};
float maxTime[NUMPRIMITIVES] =  {100, 70, 2000, 100, 2000,  10,   50,   600, 100, 1000 };
*/ 

/* Vertical Reverse *******/
/*
#define NUMPRIMITIVES 8
byte vertical[NUMPRIMITIVES] = {N, RL, RL, NS, BR, FS, BF, N};
float maxTime[NUMPRIMITIVES] = {100, 70, 5000, 10, 50, 400, 100, 1000 };
*/


/* Vertical front *******/

#define NUMPRIMITIVES 6
byte vertical[NUMPRIMITIVES] = {N,    FL,  N,   FL, BF, N};
float maxTime[NUMPRIMITIVES] = {100, 3000, 500, 3000, 200, 1000}; 

float obstacleDistance() // This is connected to the distance sensor, issue is has to be executed in period of time
{
    long duration, distance;
  digitalWrite(trigPin, LOW);  // Added this line
  delayMicroseconds(2); // Added this line
  digitalWrite(trigPin, HIGH);  
  delayMicroseconds(10); // Added this line
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = (duration/2) / 29.1; // Where did 29.1 come from?
  return distance;  
}
/*
 * 
 */

void setSpeed(int s)
{
    if (inverseAcceleration <= 1)
    {
      speed = 0;
      if (s > 0) speed = 15;  // The speeds here are for how fast the vehicle will move when going forwards, or backward
      if (s < 0) speed = -10;

      if (inverseAcceleration == 0) 
        inverseAcceleration = 12 - s; 
    }
    else 
    {
      speed = 0;  
      
    }
    inverseAcceleration--;
}

void neutral()
{
    speed = 0;
}



void brakeForward()
{  
    speed = -10;
}

void brakeReverse()
{
    speed = 10;
}

void left()
{
    Steering.write(132); // Write statements are outgoing to a pin
}


void right()
{
    Steering.write(52); 
}

void straight()
{
  Steering.write(92);
}

void reset()
{
  Motor.write(0);
  delay(10);  
  Motor.write(90);
}


void parking()
{
    byte state = 0;
    boolean completed = false;
    boolean instruction = false;
    unsigned long initialTime;
    int numBreak;
    float obstacledist; 

    while (state < NUMPRIMITIVES)
    {
        initialTime = millis();
        

        while (!instruction)
        {
          if (!completed)
          { // We need to add a counter, make slower than normal execution
//                obstacledist = obstacleDistance(); 
                Motor.write(90 + speed);  
                switch (vertical[state])
                {
                 case RESET:
                    straight();
                    break;
                  case BF:
                     straight();
                     setSpeed(-1);
                     break;

                  case BR:
                     setSpeed(-1);
                     break;

                  case FS:
                    straight();
                    setSpeed(1);
                    break;
                  case FR:
                    Serial.write("FR");
                    right();
                    setSpeed(1);
/*                    if (obstacledist < 20.0)
                    {
                        brakeForward();
                    }
  */       
                    break;
                  case FL:
                    left();
                    setSpeed(1);
                    break;
                  case RL:
                    right();
                    setSpeed(-1);
                    break;
                  case RR:
                    left();
                    setSpeed(-1);
                    break;
                  case RS:  
                    straight();
                    setSpeed(-1);
                    break;
                  case NR:
                    left();
                    speed = 0;
                    break;  
                  case NS:
                    straight();
                    speed = 0;
                    break;  
                  case NL:
                    left();
                    speed = 0;
                    break;  
                 default:
                    straight();
                    speed = 0;
                }
            }
           /* else
            {
                if (speed > 0)
                  speed -=5;
                if (speed < 0)
                  speed +=5;
                if (speed >-5 && speed < 5)
                {
                  speed = 0;   
                  reset();
                  break;  
                }
            } */ 
            if (millis() - initialTime >= maxTime[state])
            {
              completed = true;
              break;  
            }
            delay(10);
          }
        if (Serial.available())
        {
            incomingByte = Serial.read();
            if (incomingByte == 115)
            {
               reset();
                return;
            }
        }
        completed = false;
        state++;
        delay(10);

    }
}


void setup() {
  Serial.begin (9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(led, OUTPUT);
  pinMode(led2, OUTPUT);


  // attaches the servo on pin to the servo object
  // The Servo class provides a number of methods that can be used on its objects, source: http://www.robotoid.com/appnotes/arduino-more-servo-objects.html
 

   // We only hooked up 2 wires, we used one of them for control and the other for ground, power was coming from the battery
 
  Steering.attach(pinServo);  
  Motor.attach(pinMotor);  
  pinMode(pinMotor, OUTPUT);  
  delay(3000); 

  /*
   * Calibrating the motor max and min speeds, let electronic speed control, set hi and low
   */

/*  Serial.println("Start calibrating...");
  Serial.println("Sending Maximimg");
  Motor.write(179); // HI
  delay(1000);
  Serial.println("Sending Minimum");
  Motor.write(90); // LO
  delay(1000);
  Serial.println("Done");
  */  
}


void test() // Testing the motor speed
{
    int i, j, k = -1;
    for (i = 0; i<6; i++)
    {
        for (j=0; j< 50; j++)
        {
            Motor.write(90 + 10 * k);  
            delay(10); 
        }
        if (k > 0)
        {
          for (j=0; j< 20; j++)
          {
            Motor.write(90 - 10);  
            delay(10); 
          }
        }
        else
        {
          for (j=0; j< 20; j++)
          {
            Motor.write(90 + 10);  
            delay(10); 
          }
        
        }
        
        for (j=0; j< 50; j++)
        {
          Motor.write(90);
           delay(10);
        }
  //      if (k > 0)
        {
//          Motor.write(0);
  //        delay(10);
        }
        k = -1*k;
    }

}

void loop() { // This code allows us to communicate with Python via serial port


  Motor.write(90);  
  if (Serial.available())
  {
      incomingByte = Serial.read(); // Reading to a serial port, communicating via usb
      if (incomingByte == 112)
      {
          reset();
          Serial.write("Starting parking  "); // String to be printed in Python
          parking(); 
          
      }
      if (incomingByte == 113)
      {
          test();
          
      }
  }
  
  delay(10);
}  
  
